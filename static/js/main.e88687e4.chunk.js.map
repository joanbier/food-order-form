{"version":3,"sources":["components/FormSuccess.js","components/showMoreOptions.js","components/validation.js","components/Form.js","App.js","index.js"],"names":["FormSuccess","props","className","data","dish_name","diameter","showMoreOptions","form","updateField","value","type","name","id","min","max","spiciness_scale","onChange","style","backgroundColor","placeholder","no_of_slices","step","slices_of_bread","validate","length","Form","useState","preparation_time","Date","now","toString","setForm","error","setError","sent","setSent","e","target","Number","selected_type","console","log","cutEmpty","Object","entries","key","handleSubmit","a","preventDefault","errorMsg","validation","axios","post","title","body","then","response","catch","setTimeout","onSubmit","noValidate","disabled","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e88687e4.chunk.js","sourcesContent":["import \"./FormSuccess.css\";\n\nconst FormSuccess = props => {\n  return (\n    <div className=\"success\">\n      <h2>We have received your request!</h2>\n      <div>\n        <h3>Your have ordered</h3>\n        <p>{props.data.dish_name}</p>\n        {props.data.diameter && <p>Diameter:{props.data.diameter}cm</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default FormSuccess;\n","export default function showMoreOptions(form, updateField) {\n  const bcg = value => {\n    if (value <= 3) {\n      return \"green\";\n    } else if (value <= 6) {\n      return \"orange\";\n    } else {\n      return \"red\";\n    }\n  };\n\n  if (form.type === \"soup\") {\n    return (\n      <label>\n        Spiciness_scale scale:\n        <input\n          type=\"range\"\n          name=\"spiciness_scale\"\n          id=\"spiciness_scale\"\n          min=\"1\"\n          max=\"10\"\n          value={form.spiciness_scale}\n          onChange={updateField}\n        />\n        <output style={{ backgroundColor: bcg(form.spiciness_scale) }}>\n          {form.spiciness_scale}\n        </output>\n      </label>\n    );\n  } else if (form.type === \"pizza\") {\n    return (\n      <>\n        <label>\n          Number of slices:\n          <input\n            type=\"number\"\n            name=\"no_of_slices\"\n            id=\"no_of_slices\"\n            min=\"1\"\n            max=\"16\"\n            placeholder=\"8 slices\"\n            value={form.no_of_slices}\n            onChange={updateField}\n          />\n        </label>\n        <label>\n          Diameter:{\" \"}\n          <input\n            type=\"number\"\n            step=\"0.01\"\n            min=\"20\"\n            max=\"60\"\n            name=\"diameter\"\n            placeholder=\"30cm\"\n            id=\"diameter\"\n            onChange={updateField}\n            value={form.diameter}\n          />\n        </label>\n      </>\n    );\n  } else if (form.type === \"sandwich\") {\n    return (\n      <label>\n        Number of slices of bread required:\n        <input\n          type=\"number\"\n          min=\"1\"\n          max=\"10\"\n          placeholder=\"4 slices\"\n          name=\"slices_of_bread\"\n          id=\"slices_of_bread\"\n          onChange={updateField}\n          value={form.slices_of_bread}\n        />\n      </label>\n    );\n  }\n}\n","export default function validate(form) {\n  if (!form.dish_name) {\n    return \"The name is required\";\n  } else if (form.dish_name.length < 4) {\n    return \"The name must be longer than 3 characters\";\n  }\n  if (form.type === \"pizza\" && !form.no_of_slices) {\n    return \"Number of pizza slices is required\";\n  }\n\n  if (form.type === \"pizza\" && form.diameter < 20) {\n    return \"Diamater is required\";\n  }\n\n  if (form.type === \"soup\" && !form.spiciness_scale) {\n    return \"Spiciness scale is required\";\n  }\n  if (form.type === \"sandwich\" && !form.slices_of_bread) {\n    return \"Number of slices of bread is required\";\n  }\n  return null;\n}\n","import React, { useState } from \"react\";\nimport \"./Form.css\";\nimport FormSuccess from \"./FormSuccess\";\nimport showMoreOptions from \"./showMoreOptions\";\nimport validation from \"./validation\";\nimport axios from \"axios\";\n\n//https://jsonplaceholder.typicode.com/posts\n\nconst Form = () => {\n  const [form, setForm] = useState({\n    dish_name: \"\",\n    preparation_time: \"--:--:--\",\n    type: \"\",\n    id: `order-${Date.now().toString(32)}`,\n    no_of_slices: \"\",\n    diameter: \"\",\n    spiciness_scale: \"\",\n    slices_of_bread: \"\"\n  });\n\n  const [error, setError] = useState(null);\n\n  const [sent, setSent] = useState(false);\n\n  const updateField = e => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    });\n\n    if (e.target.type === \"range\" || e.target.type === \"number\") {\n      setForm({\n        ...form,\n        [e.target.name]: Number(e.target.value)\n      });\n    }\n\n    if (e.target.name === \"type\") {\n      const selected_type = e.target.value;\n\n      switch (selected_type) {\n        case \"pizza\":\n          setForm({\n            ...form,\n            preparation_time: \"01:20:00\",\n            type: selected_type,\n            spiciness_scale: \"\",\n            slices_of_bread: \"\"\n          });\n          break;\n        case \"soup\":\n          setForm({\n            ...form,\n            preparation_time: \"00:25:00\",\n            type: selected_type,\n            diameter: \"\",\n            no_of_slices: \"\",\n            slices_of_bread: \"\"\n          });\n          break;\n        case \"sandwich\":\n          setForm({\n            ...form,\n            preparation_time: \"00:40:00\",\n            type: selected_type,\n            diameter: \"\",\n            no_of_slices: \"\",\n            spiciness_scale: \"\"\n          });\n          break;\n        default:\n          console.log(`Sorry, we are out of ${selected_type}.`);\n      }\n    }\n  };\n\n  const setID = () => {\n    const getId = `order-${Date.now().toString(32)}`;\n    return getId;\n  };\n\n  const cutEmpty = () => {\n    const data = {};\n    for (const [key, value] of Object.entries(form)) {\n      if (value) {\n        data[key] = value;\n      }\n    }\n    return data;\n  };\n\n  const hideSuccessForm = () => {\n    setTimeout(() => setSent(false), 5000);\n  };\n\n  const sendToServer = data => {\n    axios\n      .post(\"https://frosty-wood-6558.getsandbox.com:443/dishes\", {\n        title: \"Food order\",\n        body: data\n      })\n      .then(response => console.log(response))\n      .catch(error => console.log(error));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const errorMsg = validation(form);\n    if (errorMsg) {\n      setError(errorMsg);\n      return;\n    }\n    setForm({ ...form, id: setID() });\n    sendToServer(cutEmpty());\n    setError(null);\n    setSent(true);\n    hideSuccessForm();\n  };\n\n  return (\n    <div>\n      <h1>What would you like to eat?</h1>\n      {error && (\n        <div className=\"error\">\n          <i className=\"fas fa-info-circle\"></i> {error}\n        </div>\n      )}\n      <form onSubmit={handleSubmit} noValidate className=\"form-container\">\n        <label>\n          Dish name:\n          <input\n            type=\"text\"\n            name=\"dish_name\"\n            id=\"dish_name\"\n            placeholder=\"HexOcean pizza...\"\n            value={form.dish_name}\n            onChange={updateField}\n          />\n        </label>\n        <label>\n          Preparation time:\n          <input\n            disabled\n            type=\"time\"\n            step=\"2\"\n            name=\"preparation_time\"\n            id=\"\"\n            value={form.preparation_time}\n          />\n        </label>\n        <label>\n          Dish type:\n          <select name=\"type\" onChange={updateField}>\n            <option value=\"\">--Choose the dish--</option>\n            <option value=\"pizza\">Pizza</option>\n            <option value=\"soup\">Soup</option>\n            <option value=\"sandwich\">Sandwich</option>\n          </select>\n        </label>\n        {showMoreOptions(form, updateField)}\n        <button disabled={!form.type || sent} type=\"submit\">\n          Submit\n        </button>\n      </form>\n      {sent && <FormSuccess data={cutEmpty(form)} />}\n    </div>\n  );\n};\n\nexport default Form;\n","import \"./App.css\";\nimport Form from \"./components/Form\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}